# js-2dmath [![Build Status](https://secure.travis-ci.org/llafuente/js-2dmath.png?branch=master)](http://travis-ci.org/llafuente/js-2dmath)


Javascript 2D Math (vector, matrix, trigonometry, ...) for high performance

So the objetive is "Be fast as hell!"




## API

More info to come... soon :D
This doc is autogenerated but it's not based on the source comments is just a quick raw export...

###  Vec2
* create (x, y)
* zero ()
* clone (v1)
* equals (v1, v2)
* equalsEpsilon (v1, v2)
* gt (v1, v2)
* lt (v1, v2)
* near (v1, v2, dist)
* isValid (v1)
* isNaN (v1)
* copy (out, v1)
* negate (out, v1)
* perpendicular (out, v1)
* perp (out, v1)
* rotateCW (out, v1)
* normalize (out, v1)
* rperpendicular (out, v1)
* rerp (out, v1)
* rotateCCW (out, v1)
* lerp (out, v1, v2, t)
* lerpconst (out, v1, v2, d)
* slerp (out, v1, v2, t)
* slerpconst (out, v1, v2, angle)
* forAngle (v1, angle)
* project (out, v1, v2)
* rotate (out, v1, angle, center)
* rotateVec (out, v1, v2)
* unrotateVec (out, v1, v2)
* midPoint (out, v1, v2)
* reflect (out, v1, v2_normal)
* subtract (out, v1, v2)
* sub (out, v1, v2)
* add (out, v1, v2)
* multiply (out, v1, v2)
* mult (out, v1, v2)
* divide (out, v1, v2)
* div (out, v1, v2)
* scale (out, v1, factor)
* max (out, v1, v2)
* min (out, v1, v2)
* abs (out, v1)
* scaleAndAdd (out, v1, v2, scale)
* clamp (out, v1, len)
* magnitude (v1, v2)
* compare (v1, v2)
* dot (v1, v2)
* cross (v1, v2)
* toAngle (v1)
* angle (v1)
* distance (v1, v2)
* sqrDistance (v1, v2)
* distanceSq (v1, v2)
* length (v1)
* sqrLength (v1)
* lengthSq (v1)

###  Line2
* create (x, y, m)
* fromPoints (x1, y1, x2, y2)
* copy (out, l1)
* clone (l1)
* add (out, l1, v1)
* translate (out, l1, v1)
* subtract (out, l1, v1)
* sub (out, l1, v1)
* parallel (out, l1)

###  Segment2
* create (x1, y1, x2, y2)
* clone (seg2)
* copy (out, seg2)
* translate (out, seg2, v1)
* length (seg2)
* sqrLength (seg2)
* lengthSq (seg2)
* cross (seg2, v1)
* closestPoint (out, seg2, v1)

###  Rectangle
* create (x1, y1, x2, y2)
* fromBB (bb)
* zero ()
* clone (rec1)
* copy (out, rec1)
* normalize (out, rec1, force)
* center (out_vec2, rec1)
* translate (out, rec1, vec2)
* distance (rect1, rect2)
* area (rect1)

###  BB2
* create (l, b, r, t)
* fromCircle (circle)
* zero ()
* clone (bb)
* copy (out, bb)
* merge (out, bb1, bb2)
* area (bb)
* normalize (out, bb2)
* translate (out, rec1, vec2)
* clampVec (out, bb, vec2)
* TOPLEFT 1
* TOPMIDDLE 2
* TOPRIGHT 3
* CENTERLEFT 4
* CENTER 5
* CENTERRIGHT 6
* BOTTOMLEFT 7
* BOTTOM 8
* BOTTOMRIGHT 9
* align (out_vec2, con_bb, alignament)

###  Circle
* create (x, y, r)
* clone (circle)
* copy (out, circle)
* translate (out, circle, v1)
* distance (acircle, bcircle)
* length (circle)
* area (circle)

###  Beizer
* cubic (cp0x, cp0y, cp1x, cp1y, cp2x, cp2y, cp3x, cp3y)
* quadric (cp0x, cp0y, cp1x, cp1y, cp2x, cp2y)
* get (out, curve, t)
* length (curve, step)

###  Matrix2D
* create ()
* fromPoints ()
* copy (out, m2d)
* identity (out)
* dRotate (out, m2d, degrees)
* rotate (out, m2d, radians)
* dRotation (out, m2d, degrees)
* dSetRotation (out, m2d, degrees)
* rotation (out, m2d, radians)
* setRotation (out, m2d, radians)
* translate (out, m2d, v1)
* gTranslate (out, m2d, v1)
* position (out, m2d, v1)
* setPosition (out, m2d, v1)
* scale (out, m2d, v1)
* scalation (out, m2d, v1)
* setScale (out, m2d, v1)
* dSkewX (out, m2d, degrees)
* skewX (out, m2d, radians)
* dSkewY (out, m2d, degrees)
* skewY (out, m2d, radians)
* dSkew (out, m2d, vec2_degrees)
* skew (out, m2d, vec2)
* dSetSkew (out, m2d, vec2_degrees)
* setSkew (out, m2d, vec2)
* multiply (out, m2d, m2d_2)
* multiplyVec2 (out_vec2, m2d, vec2)
* getPosition (out_vec2, m2d)
* getScale (out_vec2, m2d)
* getSkew (out_vec2, m2d)
* reflect (out, m2d)
* inverse (out, m2d)
* transpose (out, m2d)
* determinant (out, m2d)
* translationMatrix (x, y)
* dSkewXMatrix (degrees)
* skewXMatrix (radians)
* dSkewYMatrix (degrees)
* skewYMatrix (radians)
* scalingMatrix (sx, sy)

###  Intersection
* COLLIDE 1
* INSIDE 2
* OUTSIDE 3
* COINCIDENT 4
* PARALLEL 5
* TANGENT 6
* bb2_bb2 (bb1, bb2)
* bb2_vec2 (bb, vec2)
* rectangle_rectangle (rectangle_1, rectangle_2, points, distance)
* rectangle_vec2 (rectangle, vec2, points, distance)
* circle_vec2 (circle, vec2, points, distance)
* circle_circle (acircle, bcircle, points, distance)
* circle_segment2 (circle, segment2)
* line2_line2 (aline, bline, points, distance)
* segment2_segment2 (asegment, bsegment)
* segment2_vec2 (seg, vec)

###  Transitions
* linear (zero)
* create (name, transition)
* Pow (pos)
* PowIn (pos)
* PowOut (pos)
* PowInOut (pos)
* Expo (pos)
* ExpoIn (pos)
* ExpoOut (pos)
* ExpoInOut (pos)
* Circ (pos)
* CircIn (pos)
* CircOut (pos)
* CircInOut (pos)
* Sine (pos)
* SineIn (pos)
* SineOut (pos)
* SineInOut (pos)
* Back (pos)
* BackIn (pos)
* BackOut (pos)
* BackInOut (pos)
* Bounce (pos)
* BounceIn (pos)
* BounceOut (pos)
* BounceInOut (pos)
* Elastic (pos)
* ElasticIn (pos)
* ElasticOut (pos)
* ElasticInOut (pos)
* Quad (pos)
* QuadIn (pos)
* QuadOut (pos)
* QuadInOut (pos)
* Cubic (pos)
* CubicIn (pos)
* CubicOut (pos)
* CubicInOut (pos)
* Quart (pos)
* QuartIn (pos)
* QuartOut (pos)
* QuartInOut (pos)
* Quint (pos)
* QuintIn (pos)
* QuintOut (pos)
* QuintInOut (pos)
* LINK bject
* animate (obj, prop, values, ioptions)
* tween (obj, params, options)



## License

MIT
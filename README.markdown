# js-2dmath [![Build Status](https://secure.travis-ci.org/llafuente/js-2dmath.png?branch=master)](http://travis-ci.org/llafuente/js-2dmath)


Fast 2d geometry math: Vector2, Rectangle, Circle, Matrix2x3 (2D transformation), Circle, BoundingBox, Line2, Segment2, Intersections, Distances, Transitions (animation/tween), Noise, Random numbers.

So the objective is "**Be fast**"


## Help needed / TODO LIST

* API completeness
* Testing
* use falafel to create an asm.js build
* Numerical integrators
* AI: Path-finding, Steer, Backtracking
* IK: FABRIK
* Minkowski distance, euclidean, Manhattan
* Beizer math
* Serialization / De-serialization
* did I miss anything useful?


## Performance? HOW?/TIPS

* Avoid **new**
* Use arrays instead of objects, this is huge performance boost!
* Avoid creating unnecessary variables (reuse intermediate variables) only "create" & "clone" methods should create new variables.
* Cache every function call to a single variable. example: Vec2.add -> vec2_add, even Math.*
* If access an multi-dimensional array in a loop, cache the array access. for(i...) carr=arr[i]; carr[X]
* Do not use forEach, map, every etc. or other looping method that require apply/call, both are costly.

I'm sure I miss/ignore some of my own performance tips, **PR if you find any error or find a better way!**

See some [performance test](https://github.com/llafuente/js-2dmath/blob/master/js-performance-tests.markdown) that prove it.

## Browser & Debug distributions

```bash
grunt dist
# creates:
# - dist/js-2dmath-browser.js
# - debug/js-2dmath-browser-debug.js
# - docs/*.markdown
```

**Why there is a debug dist?**

Debug distribution use falafel to add assertions based on the documentation.

Force to use valid sanitized inputs (Arrays, not NaN, not undefined, not null) to every function.


## Developing

```bash
grunt watch
```

This will "dist" on any .js file change


## What can you do with js-2dmath?

See some examples that we use as tests :)

* [Angles](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/angle.html)
* [Beizer](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/beizer.html)
* [Circle](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/circle.html)
* [Intersections](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/intersections.html)
* [line2](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/line2.html)
* [Matrix23](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/matrix23.html)
* [Segment2](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/segment2.html)
* [Transitions](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/transitions.html)
* [Triangle](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/triangle.html)
* [Vec2 collisions](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/vec2-collisions.html)
* [Vec2](http://htmlpreview.github.io/?https://github.com/llafuente/js-2dmath/blob/master/test/vec2.html)


## API

The documentation is autogenerated with [falafel](https://github.com/substack/node-falafel) see dist.js for more fun! :)

* [Vec2](https://github.com/llafuente/js-2dmath/blob/master/docs/vec2.markdown)

* [Line2](https://github.com/llafuente/js-2dmath/blob/master/docs/line2.markdown)

* [Segment2](https://github.com/llafuente/js-2dmath/blob/master/docs/segment2.markdown)

* [Rectangle](https://github.com/llafuente/js-2dmath/blob/master/docs/rectangle.markdown)

* [AABB2](https://github.com/llafuente/js-2dmath/blob/master/docs/aabb2.markdown)

* [Circle](https://github.com/llafuente/js-2dmath/blob/master/docs/circle.markdown)

* [Matrix22](https://github.com/llafuente/js-2dmath/blob/master/docs/matrix22.markdown)

* [Matrix23](https://github.com/llafuente/js-2dmath/blob/master/docs/matrix23.markdown)

* [Polygon](https://github.com/llafuente/js-2dmath/blob/master/docs/polygon.markdown)

* [Beizer](https://github.com/llafuente/js-2dmath/blob/master/docs/beizer.markdown)

* [Triangle](https://github.com/llafuente/js-2dmath/blob/master/docs/triangle.markdown)

* [Intersection](https://github.com/llafuente/js-2dmath/blob/master/docs/intersection.markdown)

* [Distance](https://github.com/llafuente/js-2dmath/blob/master/docs/distance.markdown)

* [Transitions](https://github.com/llafuente/js-2dmath/blob/master/docs/transitions.markdown)

* [Xorshift](https://github.com/llafuente/js-2dmath/blob/master/docs/xorshift.markdown)

* [Noise](https://github.com/llafuente/js-2dmath/blob/master/docs/noise.markdown)


## FAQ

**How do i know a variable type?**

You can't, there is no *instanceof* or anything like that, everything are numbers/arrays.

I choose to keep track of all types using meaningful naming or enclose the variable in an object like

```js
var movable = {
    body: Polygon.create(/*...*/), // could be a circle, change the type...
    type: "polygon"
}
```